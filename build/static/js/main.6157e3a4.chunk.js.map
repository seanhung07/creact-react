{"version":3,"sources":["serviceWorker.js","components/documents.js","components/calender.js","components/login.js","components/notfound.js","components/main.js","components/dashboard.js","index.js","title.png"],"names":["Boolean","window","location","hostname","match","Documents","className","title","scroll","to","Component","Calender","Login","responseGoogle","response","console","log","googleId","isNaN","localStorage","setItem","replace","src","titlepic","alt","clientId","buttonText","onSuccess","this","onFailure","cookiePolicy","React","withRouter","Notfound","Main","exact","path","component","Dashboard","props","pathname","Fragment","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6157e3a4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport {Layout,Header,Navigation,Drawer, Content} from 'react-mdl';\nimport {Link} from 'react-router-dom';\nimport Main from '../components/main';\nclass Documents extends Component{\n    render(){\n        return(\n            <div className=\"demo-big-content\">\n            <Layout>\n                <Header className= \"header-color\" title=\"PAS\" scroll>\n                    <Navigation>\n                        <Link to=\"/dashboard\">DashBoard</Link>\n                        <Link to=\"/documents\">Documents</Link>\n                        <Link to=\"/calender\">Calender</Link>\n                        <Link to=\"#\">Sign out</Link>\n                    </Navigation>\n                </Header>\n                <Drawer title=\"PAS\">\n                    <Navigation>\n                        <Link to=\"/dasboard\">DashBoard</Link>\n                        <Link to=\"/documents\">Documents</Link>\n                        <Link to=\"/calender\">Calender</Link>\n                        <Link to=\"#\">Sign out</Link>\n                    </Navigation>\n                </Drawer>\n                <Content>\n                    <div className=\"page-content\" />\n                    <Main/>\n                </Content>\n            </Layout>\n        </div>\n        )\n    }\n\n}\n\nexport default Documents;","import React, { Component } from 'react';\nimport {Layout,Header,Navigation,Drawer, Content} from 'react-mdl';\nimport {Link} from 'react-router-dom';\nimport Main from '../components/main';\nclass Calender extends Component{\n    render(){\n        return(\n            <div className=\"demo-big-content\">\n            <Layout>\n                <Header className= \"header-color\" title=\"PAS\" scroll>\n                    <Navigation>\n                        <Link to=\"/dashboard\">DashBoard</Link>\n                        <Link to=\"/documents\">Documents</Link>\n                        <Link to=\"/calender\">Calender</Link>\n                        <Link to=\"#\">Sign out</Link>\n                    </Navigation>\n                </Header>\n                <Drawer title=\"PAS\">\n                    <Navigation>\n                        <Link to=\"/dashboard\">DashBoard</Link>\n                        <Link to=\"/documents\">Documents</Link>\n                        <Link to=\"/calender\">Calender</Link>\n                        <Link to=\"#\">Sign out</Link>\n                    </Navigation>\n                </Drawer>\n                <Content>\n                    <div className=\"page-content\" />\n                    <Main/>\n                </Content>\n            </Layout>\n        </div>\n        )\n    }\n\n}\n\nexport default Calender;","\nimport React from 'react';\nimport '../../src/App.css';\nimport titlepic from'../../src/title.png'\nimport { GoogleLogin } from 'react-google-login';\nimport {withRouter} from 'react-router-dom';\n\nclass Login extends React.Component {\n    \n responseGoogle = (response) =>{\n    console.log(response.googleId)\n    if(!isNaN(response.googleId)){\n        window.localStorage.setItem('token',response.googleId);\n        window.location.replace(\"/dashboard\");\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={titlepic} className=\"App-logo\" alt=\"logo\" />\n          <div className=\"wrap-login100 p-t-30 p-b-50\"><span className=\"login100-form-title p-b-35\">Pacific American School </span></div>\n          <GoogleLogin\n            clientId=\"1015132118515-s5vvq9n86s6pabsvj8fkk6ic2d5iuuak.apps.googleusercontent.com\"\n            buttonText=\"Sign in With Google\"\n            onSuccess={this.responseGoogle}\n            onFailure={this.responseGoogle}\n            cookiePolicy={'single_host_origin'}\n          />         \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Login);","import React from 'react';\n\nconst Notfound = () =>{\n    return <h1>404</h1>;\n\n};\n\nexport default  Notfound;","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport Dashboard from './dashboard';\nimport Documents from './documents';\nimport Calender from './calender';\nimport Login from './login';\nimport Notfound from './notfound';\n\nconst Main = () => (\n   <Switch>\n       <Route exact path =\"/dashboard\" component={Dashboard}/>\n       <Route path = \"/documents\" component={Documents}/>\n       <Route path = \"/calender\" component={Calender}/>\n       <Route path = \"/login\" component={Login}/>\n       <Route path =\"/not-found\" component={Notfound}/>\n\n   </Switch>\n\n)\n\nexport default Main;\n","import React, { Component } from 'react';\nimport {Layout,Header,Navigation,Drawer, Content} from 'react-mdl';\nimport {Link, withRouter} from 'react-router-dom';\nimport '../App.css';\nimport Main from '../components/main';\nclass Dashboard extends Component{\n    render(){\n        console.log(this.props)\n        return(\n            <div className=\"demo-big-content\">\n            <Layout>\n                {\n                this.props.location.pathname != \"/login\" ?\n                <React.Fragment>\n                    <Header className= \"header-color\" title=\"PAS\" scroll>\n                        <Navigation>\n                            <Link to=\"/dashboard\">DashBoard</Link>\n                            <Link to=\"/documents\">Documents</Link>\n                            <Link to=\"/calender\">Calender</Link>\n                            <Link to=\"#\">Sign out</Link>\n                        </Navigation>\n                    </Header>\n                    <Drawer title=\"PAS\">\n                        <Navigation>\n                            <Link to=\"/dashboard\">DashBoard</Link>\n                            <Link to=\"/documents\">Documents</Link>\n                            <Link to=\"/calender\">Calender</Link>\n                            <Link to=\"#\">Sign out</Link>\n                        </Navigation>\n                    </Drawer>\n                </React.Fragment> : \"\"\n                }\n                <Content>\n                    <div className=\"page-content\" />\n                   <Main/>\n                </Content>\n            </Layout>\n        </div>\n        )\n    }\n\n}\n\nexport default withRouter(Dashboard);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom'\nimport Dashboard from './components/dashboard';\nimport App from './App';\n\n\nReactDOM.render(\n<BrowserRouter>\n    <Dashboard/>\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/title.651a97ce.png\";"],"sourceRoot":""}