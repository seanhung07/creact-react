{"version":3,"sources":["serviceWorker.js","components/Login.jsx","components/Documents.jsx","components/Calendar.jsx","components/NotFound.jsx","App.js","index.js","assets/logo.png"],"names":["Boolean","window","location","hostname","match","Login","responseGoogle","response","console","log","isNaN","googleId","localStorage","setItem","replace","className","src","Logo","alt","clientId","buttonText","onSuccess","onFailure","cookiePolicy","Documents","Calendar","NotFound","DashboardLayout","Main","props","title","scroll","to","App","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"yJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gFCkBSC,EA9BD,WACZ,SAASC,EAAeC,GACtBC,QAAQC,IAAIF,GACPG,MAAMH,EAASI,YAClBV,OAAOW,aAAaC,QAAQ,QAASN,EAASI,UAC9CV,OAAOC,SAASY,QAAQ,eAI5B,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yBAAKH,UAAU,+BACb,0BAAMA,UAAU,8BAAhB,4BAIF,kBAAC,cAAD,CACEI,SAAS,4EACTC,WAAW,sBACXC,UAAW,SAACd,GAAD,OAAcD,EAAeC,IACxCe,UAAW,SAACf,GAAD,OAAcD,EAAeC,IACxCgB,aAAc,0BCrBTC,EANG,kBACd,2CCKWC,EANE,kBACb,0CCGWC,EAJE,kBACb,oCCsBEC,EAAkB,SAACC,GAAD,OAAU,SAACC,GAAD,OAChC,yBAAKd,UAAU,oBACb,kBAAC,SAAD,KACE,kBAAC,SAAD,CAAQA,UAAU,eAAee,MAAM,MAAMC,QAAM,GACjD,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,cAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,KAAT,cAGJ,kBAAC,SAAD,CAAQF,MAAM,OACZ,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAME,GAAG,cAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,KAAT,eAIN,kBAAC,UAAD,KACE,yBAAKjB,UAAU,iBACf,kBAACa,EAASC,OAKDI,EAvCH,kBACV,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAC/B,0CAEF,kBAAC,IAAD,CAAOD,KAAK,aAAaC,UAAWT,EAAgBH,KACpD,kBAAC,IAAD,CAAOW,KAAK,YAAYC,UAAWT,EAAgBF,KACnD,kBAAC,IAAD,CAAOU,KAAK,SAASC,UAAW/B,IAChC,kBAAC,IAAD,CAAO8B,KAAK,IAAIC,UAAWV,OCfjCW,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBOrInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.eda3579c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport { GoogleLogin } from 'react-google-login';\nimport '../assets/App.css';\nimport Logo from '../assets/logo.png';\n\nconst Login = () => {\n  function responseGoogle(response) {\n    console.log(response);\n    if (!isNaN(response.googleId)) {\n      window.localStorage.setItem('token', response.googleId);\n      window.location.replace(\"/documents\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={Logo} className=\"App-logo\" alt=\"logo\" />\n        <div className=\"wrap-login100 p-t-30 p-b-50\">\n          <span className=\"login100-form-title p-b-35\">\n            Pacific American School\n          </span>\n        </div>\n        <GoogleLogin\n          clientId=\"1015132118515-s5vvq9n86s6pabsvj8fkk6ic2d5iuuak.apps.googleusercontent.com\"\n          buttonText=\"Sign in With Google\"\n          onSuccess={(response) => responseGoogle(response)}\n          onFailure={(response) => responseGoogle(response)}\n          cookiePolicy={'single_host_origin'}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from 'react';\n\nconst Documents = () => (\n    <div>\n        Documents\n    </div>\n);\n\nexport default Documents;\n","import React from 'react';\n\nconst Calendar = () => (\n    <div>\n        Calender\n    </div>\n);\n\nexport default Calendar;\n","import React from 'react';\n\nconst NotFound = () => (\n    <h1>404</h1>\n);\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport './assets/index.css';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport Login from './components/Login';\nimport Documents from './components/Documents';\nimport Calendar from './components/Calendar'\nimport NotFound from './components/NotFound';\n\nconst App = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={() => (\n        <h1>Default</h1>\n      )} />\n      <Route path=\"/documents\" component={DashboardLayout(Documents)} />\n      <Route path=\"/calendar\" component={DashboardLayout(Calendar)} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"*\" component={NotFound} />\n    </Switch>\n  </BrowserRouter>\n);\n\nconst DashboardLayout = (Main) => (props) => (\n  <div className=\"demo-big-content\">\n    <Layout>\n      <Header className=\"header-color\" title=\"PAS\" scroll>\n        <Navigation>\n          <Link to=\"/documents\">Documents</Link>\n          <Link to=\"/calendar\">Calendar</Link>\n          <Link to=\"#\">Sign out</Link>\n        </Navigation>\n      </Header>\n      <Drawer title=\"PAS\">\n        <Navigation>\n          <Link to=\"/documents\">Documents</Link>\n          <Link to=\"/calendar\">Calendar</Link>\n          <Link to=\"#\">Sign out</Link>\n        </Navigation>\n      </Drawer>\n    </Layout>\n    <Content>\n      <div className=\"page-content\" />\n      <Main {...props} />\n    </Content>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.651a97ce.png\";"],"sourceRoot":""}